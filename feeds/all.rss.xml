<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>KhanIO</title><link>http://www.khanio.com/</link><description></description><atom:link href="http://www.khanio.com/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 10 Dec 2013 09:00:00 +0800</lastBuildDate><item><title>EDI X12 to CSV Conversion Using Python</title><link>http://www.khanio.com/posts/2013/12/10/edi-x12-to-csv-conversion-using-python/</link><description>&lt;iframe src="//player.vimeo.com/video/49922124?color=fc6341" width="100%" height="400" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Tue, 10 Dec 2013 09:00:00 +0800</pubDate><guid>tag:www.khanio.com,2013-12-10:posts/2013/12/10/edi-x12-to-csv-conversion-using-python/</guid><category>python</category></item><item><title>D'oh - The Pilot</title><link>http://www.khanio.com/posts/2013/10/13/doh-the-pilot/</link><description>&lt;iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F115127410"&gt;&lt;/iframe&gt;

&lt;p&gt;About a year back, on a weekend I started thinking about web identity, i.e how am I structured on web. With the increasing number of apps and sevices I signed up with, it was hard to keep track of my own web persona. And eventually I realized, my identity on web was very confusing to myself. Over a period of time I had used different nomenclature/schemes for usernames, passwords and website titles. And the very simple question "About Me", was never the same on different web properties. I knew this was not right. So the first action I had to take was to define myself, what matters most to me, who am I and how much of worth would all this be to the audience.&lt;/p&gt;
&lt;p&gt;After jotting down my attributes and interests, it was clear to me that my ability to realize ideas into products and the never dying entrepreneurial instinct, were the two traits that defined me. And so the answer to 'About Me' field turned out to be 'Just trying to independently...', which was taken from a Bloomberg's documentary on Michael Burry. I could pretty much relate every attribute about myself with this statement. And I didn't shy away from not been original, as I am not an artist but more of an opportunist.&lt;/p&gt;
&lt;p&gt;With the basic definition about me out of the way, it was turn to find a right naming scheme, which would be apt for usernames and web site domain name. Earlier I used to blog, for which the domain was thepixelcode.com, and due to a foolish mistake of mine, I lost the source code and access to the hosting server, lesson learnt was not to rely on cheap third party services for core stuff. After tinkering a bit with prefixes and suffixes, I found 'khanio.com' to be available. The basic fundamental of computer science engineering is the ability to operate on a set of inputs and deliver the required set of output based on a defined procedure. So hence I/O for Input/Output got added to my surname*.&lt;/p&gt;
&lt;p&gt;Few months later in April 2013, the design was done and the required markup generated, I opted to use GitHub for hosting my static website and the source code. And once this was done, I made to a promise to myself, that I woudld make sure to write weekly about stuff that matters to me.&lt;/p&gt;
&lt;p&gt;Fast forward again to current time, and you will realize that I haven't kept the promise to myself. which made me think agian, why did I take all the efforts then, if this was my commitment to the asset. I could easily blame my work and travel schedule, or my weekend projects, but that was not the real problem. The problem was with my ability to sit in from of a text editor and type. Writing is a very thought provoking process and many a times, I would start on certain topic and would end up thinking or exploring something else. Impluses would override me.&lt;/p&gt;
&lt;p&gt;Yes, me and Homer Simpson have something in common, we are just not foolish but we are completely ruled by our impulses, headfirst into every single impulsive thought that occurs to us. And the only way I could revive and keep up to my commitment was I choose a different strategy. Instead of starting with a blank page and do nothing, I decided I would record audio notes for my self reference whenever I can find time on weekdays, and consolidate them into a note on a weekend, which I can later reason. Sharing these thoughts with you, is not for exhibition purpose but more for self-healing, I wanted to clean up my closet and sort out the events that occured in my life and reason them with you. Your feedback would defintely help me develop the context further. So looking forward to connect. Cheers.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Sun, 13 Oct 2013 09:00:00 +0800</pubDate><guid>tag:www.khanio.com,2013-10-13:posts/2013/10/13/doh-the-pilot/</guid><category>doh</category><category>entrepreneurship</category><category>self-help</category></item><item><title>AWS Summit 2013 Singapore</title><link>http://www.khanio.com/posts/2013/08/29/aws-summit-2013-singapore/</link><description>&lt;p&gt;&lt;img src="https://lh4.googleusercontent.com/-23it94guKiY/UfSaPNR3kxI/AAAAAAAAATc/UVc2Vd1eUHo/w1356-h905-no/DSC_5352.jpg" width="100%" height="400"&gt;&lt;/p&gt;
&lt;h4&gt;With Dr. Werner Vogels, CTO @ Amazon&lt;/h4&gt;

&lt;p&gt;&lt;img src="https://lh4.googleusercontent.com/-4A4JdNbD3ME/UfSaPFQbWhI/AAAAAAAAATg/pxej6pEcZ30/w1356-h905-no/DSC_5354.jpg" width="100%" height="400"&gt;&lt;/p&gt;
&lt;h4&gt;With Jeff Barr and John Fitzpatrick.&lt;/h4&gt;

&lt;p&gt;&lt;img src="https://lh3.googleusercontent.com/-wz7_QZbxhU0/UfSaPHY0VvI/AAAAAAAAATY/H_2dqhx50Ns/w1356-h905-no/DSC_5358.jpg" width="100%" height="400"&gt;&lt;/p&gt;
&lt;h4&gt; With Jeff Barr, Pricipal Evangelist @ AWS&lt;/h4&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Thu, 29 Aug 2013 10:15:00 +0800</pubDate><guid>tag:www.khanio.com,2013-08-29:posts/2013/08/29/aws-summit-2013-singapore/</guid><category>cloud</category><category>aws</category></item><item><title>Designing Big Data Solutions Using AWS</title><link>http://www.khanio.com/posts/2013/08/03/designing-big-data-solutions-using-aws/</link><description>&lt;script async class="speakerdeck-embed" data-id="541a1780dcfb0130eb6242f2a6d35442" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;embed type="application/x-shockwave-flash" src="https://static.googleusercontent.com/external_content/picasaweb.googleusercontent.com/slideshow.swf" width="100%" height="400" flashvars="host=picasaweb.google.com&amp;hl=en_US&amp;feat=flashalbum&amp;RGB=0x000000&amp;feed=https%3A%2F%2Fpicasaweb.google.com%2Fdata%2Ffeed%2Fapi%2Fuser%2F110264619019212538944%2Falbumid%2F5907197101000778225%3Falt%3Drss%26kind%3Dphoto%26hl%3Den_US" pluginspage="http://www.macromedia.com/go/getflashplayer"&gt;&lt;/embed&gt;&lt;/p&gt;
&lt;p&gt;Here is the link &lt;a href="http://j.mp/1eoOFxU"&gt;Step-by-Step Guide to get started with Hive on Amazon EMR&lt;/a&gt; which I had refered during the talk, for you to continue further developing on the Hive Example. More on Hadoop and AWS to follow up on this blog soon, maybe in screencast form.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Sat, 03 Aug 2013 09:00:00 +0800</pubDate><guid>tag:www.khanio.com,2013-08-03:posts/2013/08/03/designing-big-data-solutions-using-aws/</guid><category>cloud</category><category>aws</category><category>hadoop</category><category>aws emr</category></item><item><title>Linux Containers (lxc) For Developer's Soul</title><link>http://www.khanio.com/posts/2013/04/28/linux-containers-for-developers-soul/</link><description>&lt;p&gt;If you have been using Linux Virtual Machines (VM) on a day to day basis to setup various development environments, one limitation you will notice that the more virtual isntances you spawn the performance of host deteriorates, meaning at times when you need more processing power or memory at host level,it isn't available as needed. This is where Linux Contianers (LXC) steps in, they let you harness all the barebone resources and yet maintain process and filesystem isolation.&lt;/p&gt;
&lt;p&gt;LXCs are not fit for all situations, but if you are like me whose day to day job is to spawn linux instances and work out different integration scenarios, and only need to isolate processes and filesystem, LXCs tend to do the job. When compared to a VM, LXC is more lightweight, well bootstraped to the host OS and above all easier to maintain and backup. One serious disadvantage of LXC is hardware resource sharing between different contianers, especially hard drive access at same time.&lt;/p&gt;
&lt;p&gt;Now lets get started, before we move forward, below detailed steps are for Ubuntu 12.04 as host operationg system, if you are using OSX or Windows operating system, you can still give LXC a shot using Virtualbox or VMWare virtual machine, or using vagrant from command line.&lt;/p&gt;
&lt;p&gt;First lets get lxc and libvirt installed, for this run the following at your command prompt.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt; &lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="n"&gt;dnsmasq&lt;/span&gt; &lt;span class="n"&gt;bridge&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt; &lt;span class="n"&gt;debootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once installed successfully, rebooting the machine is required as the network bridge (virbr0) setup by libvirt during installation will be active after reboot. Once you are back to your console after reboot, run the following to see the virtual netwrok bridge details, which is setup by libvirt.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;virsh&lt;/span&gt; &lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If all looks good, create a sample container with identifier name as &lt;em&gt;sample_cntr&lt;/em&gt;, this will take few mintues to setup depending your internet connection speed. Just like vagrant, lxc allows you to use pre-defined instance templates, and in our case we are using the &lt;em&gt;ubuntu&lt;/em&gt; template.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;sample_cntr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the container is created, every time you start the container a new IP is assigend to the instance, as we are trying to setup a web server container, it would be advisable to have a static IP address defined for the container. For this we need to edit the container's config file&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample_cntr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To allow the container use the libvirt defined default virtual network bridge, edit the following line&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lxcbr0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;virbr0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to have a static IP address assigned every time its starts, add the following line, note the IP address depends on your preference, run &lt;em&gt;ifconfig&lt;/em&gt; before to determine virbr0 network bridge details.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipv4&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;192.168.122.100&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we are done with the house keeping stuff, lets start the container in the background&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;sample_cntr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now lets get to the container command prompt and setup a nginx web server, for this at your command prompt run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;sample_cntr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will be prompted for login credentials, for the &lt;em&gt;ubuntu&lt;/em&gt; template container the default username/password is ubuntu/ubuntu. Once successfully logged in, run the following to setup simple nginx web server.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can point your browser to the contianer's IP and see the default nginx web page get displayed. To stop the contianer you can do it by running the following at your command prompt.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;lxc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;sample_cntr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To move forward you can give a try to dotcloud's &lt;a href="http://docker.io" title="Docker"&gt;docker&lt;/a&gt;, which is like vagrant for linux contianers.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Sun, 28 Apr 2013 23:15:00 +0800</pubDate><guid>tag:www.khanio.com,2013-04-28:posts/2013/04/28/linux-containers-for-developers-soul/</guid><category>ubuntu</category><category>lxc</category><category>libvirt</category><category>virtualization</category></item><item><title>RapidSSL + Nginx Web Server Setup</title><link>http://www.khanio.com/posts/2013/04/20/rapidssl-nginx-web-server-setup/</link><description>&lt;p&gt;Recently I had to setup a Nginx web server with SSL enabled by default. The underlying operating system of the machine was Ubuntu 12.04 (server edition) and the following steps were taken:&lt;/p&gt;
&lt;p&gt;First generate a new SSL key on the web server, which we will use later to upload on RapidSSL website to generate the required SSL certificate. Make sure you have openssl installed on your Ubuntu server machine and issue the following at the command prompt, considerations made here are, the domain for which we would be setting up SSL here is www.example.com, Country been US, state been California, Location been San Francisco, Organization name been ACME Corp. and fully qualified domain name been www.example.com, you will nee to replace these values with the required ones.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;openssl&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;newkey&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keyout&lt;/span&gt; &lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;subj&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/C=US/ST=CA/L=San Francisco/O=ACME Corp./CN=www.example.com&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next head to RapidSSL website and opt to purcahse single domain SSL certificate, you will be required to upload the www_example_com.csr file at the first step, and after successful checkout, you will receive an email from RapidSSL witht he reqired certificates text embedded within the email body. Copy the received text into a file called www_example_com.pem.&lt;/p&gt;
&lt;p&gt;Once this is done now issue the following at the command prompt:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we will need to configure Nginx to use by default SSL and divert http traffic on port 80 to 443 (default SSL port). issue th following at the command prompt and replace the contents of &lt;em&gt;default&lt;/em&gt; Nginx config with below one.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;nano&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sites&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once file opened, delete all content and add the below configuration:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;server_name&lt;/span&gt; &lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;share&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;rewrite&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//$server_name$request_uri permanent;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;ssl_certificate&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;certs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ssl_session_timeout&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;ssl_protocols&lt;/span&gt; &lt;span class="n"&gt;SSLv3&lt;/span&gt; &lt;span class="n"&gt;TLSv1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_ciphers&lt;/span&gt; &lt;span class="n"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="n"&gt;ADH&lt;/span&gt;&lt;span class="o"&gt;:!&lt;/span&gt;&lt;span class="n"&gt;EXPORT56&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;RC4&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;RSA&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;MEDIUM&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;LOW&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;SSLv3&lt;/span&gt;&lt;span class="o"&gt;:+&lt;/span&gt;&lt;span class="n"&gt;EXP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;access_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;error_log&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nginx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;www_example_com&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;try_files&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once done save it and restart nginx.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt; &lt;span class="n"&gt;nginx&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If all goes well you should now be able to use access the web server using https. Also if the web server is an AWS EC2 instance make sure to enable https port (443) on outbound in the required security group.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Sat, 20 Apr 2013 17:17:00 +0800</pubDate><guid>tag:www.khanio.com,2013-04-20:posts/2013/04/20/rapidssl-nginx-web-server-setup/</guid><category>nginx</category><category>rapidssl</category><category>https</category><category>ssl</category></item><item><title>Hello World</title><link>http://www.khanio.com/posts/2013/04/09/hello-world/</link><description>&lt;p&gt;This is my first post!! A classic&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See you soon ;)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zakiullah Khan Mohammed</dc:creator><pubDate>Tue, 09 Apr 2013 17:10:00 +0800</pubDate><guid>tag:www.khanio.com,2013-04-09:posts/2013/04/09/hello-world/</guid><category>helloworld</category><category>blog</category></item></channel></rss>